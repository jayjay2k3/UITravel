/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uitravel.User.UserInfo.Component;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.UserRecord;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author ACER
 */
public class ChangePass extends javax.swing.JPanel {

    private String UID;
    public ChangePass() {
        initComponents();
    }
    public void setUID(String uid){
        this.UID = uid;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundedPanel1 = new uitravel.Components.RoundedPanel();
        lblPassConfirm3 = new javax.swing.JLabel();
        txtOldPass = new uitravel.Components.PasswordField();
        txtNewPass = new uitravel.Components.PasswordField();
        ttxPassConfirm = new uitravel.Components.PasswordField();
        btnSubmit = new uitravel.Components.MyButton();

        setOpaque(false);
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        roundedPanel1.setBackground(new java.awt.Color(255, 255, 255));
        roundedPanel1.setBorderColor(new java.awt.Color(204, 204, 204));
        roundedPanel1.setWithBorder(true);

        lblPassConfirm3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPassConfirm3.setText("Đổi mật khẩu");

        txtOldPass.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtOldPass.setLabelText("Mật khẩu cũ");
        txtOldPass.setShowAndHide(true);

        txtNewPass.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtNewPass.setLabelText("Nhập mật khẩu mới");
        txtNewPass.setShowAndHide(true);

        ttxPassConfirm.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        ttxPassConfirm.setLabelText("Xác nhận mật khẩu mới");
        ttxPassConfirm.setShowAndHide(true);

        btnSubmit.setBackground(new java.awt.Color(255, 102, 0));
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Xác nhận");
        btnSubmit.setBorderColor(new java.awt.Color(255, 102, 0));
        btnSubmit.setBorderPainted(false);
        btnSubmit.setColor(new java.awt.Color(255, 102, 0));
        btnSubmit.setColorClick(new java.awt.Color(255, 102, 0));
        btnSubmit.setColorOver(new java.awt.Color(255, 0, 0));
        btnSubmit.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnSubmit.setRadius(15);
        btnSubmit.setTransparent(false);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundedPanel1Layout = new javax.swing.GroupLayout(roundedPanel1);
        roundedPanel1.setLayout(roundedPanel1Layout);
        roundedPanel1Layout.setHorizontalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundedPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtOldPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNewPass, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                            .addComponent(ttxPassConfirm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(roundedPanel1Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(lblPassConfirm3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        roundedPanel1Layout.setVerticalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(lblPassConfirm3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(txtOldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(txtNewPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(ttxPassConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        add(roundedPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        if("".equals(txtOldPass.getText())){
            JOptionPane.showMessageDialog(null,
                "Vui lòng nhập mật khẩu cũ!",
                "Thông báo!",

                JOptionPane.INFORMATION_MESSAGE);
        }
        else if("".equals(txtNewPass.getText())){
            JOptionPane.showMessageDialog(null,
                "Không được để mật khẩu trống!",
                "Thông báo!",

                JOptionPane.INFORMATION_MESSAGE);
        }
        else if("".equals(ttxPassConfirm.getText())){
            JOptionPane.showMessageDialog(null,
                "Không được để mật khẩu trống!",
                "Thông báo!",

                JOptionPane.INFORMATION_MESSAGE);
        }
        else if(!txtNewPass.getText().equals(ttxPassConfirm.getText())){
            JOptionPane.showMessageDialog(null,
                "Mật khẩu xác nhận không trùng khớp!",
                "Thông báo!",

                JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            changeUserPassword(UID,txtNewPass.getText(),txtOldPass.getText());
            setVisible(false);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed
    private void changeUserPassword(String uid, String newPassword,String oldPassword) {
        // Authenticate the user with old password
        String email = getEmailFromUID(uid);
        if (email == null) {
            return;
        }
        String loginResult = loginUser(email, oldPassword);
        if (!loginResult.equals("Đăng nhập thành công")) {
             JOptionPane.showMessageDialog(null,
                loginResult,
                "Thông báo!",
                JOptionPane.INFORMATION_MESSAGE);
             return;
        }

        // If authentication is successful, update the password
        try {
            UserRecord.UpdateRequest request = new UserRecord.UpdateRequest(uid)
                    .setPassword(newPassword);

            UserRecord userRecord = FirebaseAuth.getInstance().updateUser(request);
              JOptionPane.showMessageDialog(null,
                "Đổi mật khẩu thành công!",
                "Thông báo!",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (FirebaseAuthException e) {
            JOptionPane.showMessageDialog(null,
                "Đổi mật khẩu thất bại " +  e.getMessage(),
                "Thông báo!",
                JOptionPane.INFORMATION_MESSAGE);
        }
    } 
    private String  loginUser(String email, String password) {
        try {
            String url = "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=" + "AIzaSyCGYnqZl2CkCfgJZXj8M_O_CFPOoy2Mdi0";
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "application/json");

            JSONObject jsonInput = new JSONObject();
            jsonInput.put("email", email);
            jsonInput.put("password", password);
            jsonInput.put("returnSecureToken", true);

            con.setDoOutput(true);
            try (OutputStream os = con.getOutputStream()) {
                os.write(jsonInput.toString().getBytes());
                os.flush();
            }

            int responseCode = con.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                StringBuilder response;
                try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                    String inputLine;
                    response = new StringBuilder();
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                }

                JSONObject jsonResponse = new JSONObject(response.toString());
                // You can use idToken for authenticated requests to your Firebase backend
                return "Đăng nhập thành công";

            } else {
                StringBuilder response;
            try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getErrorStream()))) {
                String inputLine;
                response = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
            }
            JSONObject errorResponse = new JSONObject(response.toString());
            String errorMessage = errorResponse.getJSONObject("error").getString("message");
            System.out.println("Login failed1: " + response.toString());

            System.out.println("Login failed2: " +errorMessage);
            return switch (errorMessage) {
                case "INVALID_EMAIL" -> "Email không đúng định dạng";
                case "EMAIL_NOT_FOUND" -> "Email không tồn tại";
                case "INVALID_PASSWORD" -> "Mật khẩu không đúng";
                case "USER_DISABLED" -> "Tài khoản đã bị vô hiệu hóa";
                case "INVALID_LOGIN_CREDENTIALS" -> "Thông tin đăng nhập không chính xác";
                case "TOO_MANY_ATTEMPTS_TRY_LATER : Access to this account has been temporarily disabled due to many failed login attempts. You can immediately restore it by resetting your password or you can try again later." -> "Nhập sai thông tin đăng nhập quá nhiều lần, tài khoản sẽ tạm thời bị vô hiệu hóa.";
                default -> "Đăng nhập thất bại: " + errorMessage;
            };
            }
        } catch (IOException | JSONException e) {
            return "Đăng nhập thất bại: " + e.getMessage();

        }
    }
    private String getEmailFromUID(String UID) {
        try {
            System.out.println(UID);

            UserRecord user = FirebaseAuth.getInstance().getUser(UID);
            return user.getEmail();
        } catch (FirebaseAuthException ex) {
            return null;

        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private uitravel.Components.MyButton btnSubmit;
    private javax.swing.JLabel lblPassConfirm3;
    private uitravel.Components.RoundedPanel roundedPanel1;
    private uitravel.Components.PasswordField ttxPassConfirm;
    private uitravel.Components.PasswordField txtNewPass;
    private uitravel.Components.PasswordField txtOldPass;
    // End of variables declaration//GEN-END:variables


}
