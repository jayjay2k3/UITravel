/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uitravel;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.firebase.cloud.FirestoreClient;
import com.raven.datechooser.DateChooser;
import com.raven.glasspanepopup.GlassPanePopup;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import javax.swing.ImageIcon;
import net.miginfocom.swing.MigLayout;
import uitravel.User.MainUI.Place;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import uitravel.Components.Loading;


/**
 *
 * @author ACER
 */
public class UserMain extends javax.swing.JFrame {

    Map<String, String> placeData;

    public boolean isLogged = false;
    private MigLayout layout;
    private String uid;
    private List<Place> allHotels;
    Firestore firestore = FirestoreClient.getFirestore();

    public UserMain() {
        initComponents();
        init();
    }
    private void loadDataFromFireStore(String uid){
        try {
            DocumentReference docRef  = firestore.collection("user").document(uid);
            ApiFuture<DocumentSnapshot> future = docRef.get();
            // Block on response
            DocumentSnapshot document;  
            document = future.get();
            System.out.println(document.getString("FullName"));
            if(document.exists()){
                header2.setUserName(document.getString("FullName"));
                 ImageIcon temp =loadImage(document);
                    if(temp!=null){
                        header2.setUserAvatar(temp);
                    }
                }
        }
        catch (ExecutionException | InterruptedException ex) {
            Logger.getLogger(UserMain.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

     public ImageIcon loadImage(DocumentSnapshot document) {
     try {
        if (document.exists()) {
            String imageDataString = document.getString("Avatar");
            if (imageDataString != null) {
                // Convert Base64 string back to byte array
                byte[] imageData = Base64.getDecoder().decode(imageDataString);

                ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
                BufferedImage bufferedImage = ImageIO.read(bais);
                return new ImageIcon(bufferedImage);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Không tìm thấy dữ liệu ảnh!",
                        "Thông báo!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Không tìm thấy người dùng!",
                    "Thông báo!",
                    JOptionPane.ERROR_MESSAGE);
        }
    } catch (HeadlessException | IOException  e) {
        JOptionPane.showMessageDialog(null,
                "Lỗi khi tải ảnh!",
                "Thông báo!",
                JOptionPane.ERROR_MESSAGE);
    }
    return null;
}
    public void setIsLogged(boolean t){
        this.isLogged = t;
        init();
    }
    public void setUID(String uid){
        this.uid = uid;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        main = new javax.swing.JScrollPane();
        bg = new javax.swing.JLayeredPane();
        imagePanel1 = new uitravel.Components.ImagePanel();
        btnSearch = new uitravel.Components.MyButton();
        txtDate = new uitravel.Components.MyTextField();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JComboBox<>();
        header1 = new uitravel.User.MainUI.NoLoggedHeader();
        header2 = new uitravel.User.MainUI.LoggedHeader();
        pnlHotel = new uitravel.Components.RoundedPanel();
        chatBox = new uitravel.User.MainUI.ChatBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        main.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        main.setToolTipText("");

        imagePanel1.setbackgroundImage(new javax.swing.ImageIcon(getClass().getResource("/resources/BigBeach_GettyImages-874980426-ezgif.com-webp-to-png-converter.png"))); // NOI18N
        imagePanel1.setHover(false);
        imagePanel1.setisTransparent(false);
        imagePanel1.setPreferredSize(new java.awt.Dimension(1400, 800));
        imagePanel1.setwithBlack(true);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Loupe.png"))); // NOI18N
        btnSearch.setBorderColor(new java.awt.Color(255, 128, 0));
        btnSearch.setBorderPainted(false);
        btnSearch.setColor(new java.awt.Color(255, 128, 0));
        btnSearch.setColorClick(new java.awt.Color(255, 25, 20));
        btnSearch.setColorOver(new java.awt.Color(255, 50, 20));
        btnSearch.setContentAreaFilled(true);
        btnSearch.setPreferredSize(new java.awt.Dimension(49, 49));
        btnSearch.setRadius(90);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtDate.setText("myTextField1");
        txtDate.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtDate.setPrefixIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Calendar.png"))); // NOI18N
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All Tours are yours now!");

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        imagePanel1.setLayer(btnSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);
        imagePanel1.setLayer(txtDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        imagePanel1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        imagePanel1.setLayer(txtSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout imagePanel1Layout = new javax.swing.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanel1Layout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addGroup(imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 946, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(imagePanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(237, 237, 237))
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jLabel1)
                .addGap(70, 70, 70)
                .addGroup(imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearch))
                .addContainerGap(501, Short.MAX_VALUE))
        );

        pnlHotel.setBackground(new java.awt.Color(255, 255, 255));
        pnlHotel.setPreferredSize(new java.awt.Dimension(1400, 400));

        javax.swing.GroupLayout pnlHotelLayout = new javax.swing.GroupLayout(pnlHotel);
        pnlHotel.setLayout(pnlHotelLayout);
        pnlHotelLayout.setHorizontalGroup(
            pnlHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1400, Short.MAX_VALUE)
        );
        pnlHotelLayout.setVerticalGroup(
            pnlHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
        );

        bg.setLayer(imagePanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        bg.setLayer(header1, javax.swing.JLayeredPane.PALETTE_LAYER);
        bg.setLayer(header2, javax.swing.JLayeredPane.PALETTE_LAYER);
        bg.setLayer(pnlHotel, javax.swing.JLayeredPane.PALETTE_LAYER);

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bgLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(header1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(7, Short.MAX_VALUE)))
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bgLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(header2, javax.swing.GroupLayout.PREFERRED_SIZE, 1401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bgLayout.createSequentialGroup()
                    .addComponent(pnlHotel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 7, Short.MAX_VALUE)))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bgLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(header1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(549, Short.MAX_VALUE)))
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bgLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(header2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(550, Short.MAX_VALUE)))
            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                    .addContainerGap(351, Short.MAX_VALUE)
                    .addComponent(pnlHotel, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addGap(50, 50, 50)))
        );

        main.setViewportView(bg);

        jLayeredPane1.setLayer(main, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(chatBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, 1400, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(chatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 178, Short.MAX_VALUE)
                    .addComponent(chatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 178, Short.MAX_VALUE)))
        );

        getContentPane().add(jLayeredPane1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if(txtSearch.getSelectedIndex()==0){
             JOptionPane.showMessageDialog(null,
                        "Vui lòng nhập địa điểm bạn muốn đi đến!",
                        "Thông báo!",
                        
                        JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            GlassPanePopup.showPopup(new Loading());
            SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Thực hiện tác vụ nặng ở đây
                UserSearch userSearch = new UserSearch();
                userSearch.setIsLogged(isLogged);
                userSearch.setUID(uid);
                userSearch.setSearchData((String) txtSearch.getSelectedItem());
                userSearch.setAllPlaces(placeData);
                
                // Hiển thị kết quả sau khi tác vụ hoàn thành
                SwingUtilities.invokeLater(() -> {
                    userSearch.setVisible(true);
                });

                return null;
            }

            @Override
            protected void done() {
                // Ẩn màn hình loading sau khi tác vụ hoàn thành
                GlassPanePopup.closePopupAll();
                dispose();

            }
        };
        worker.execute();
 
            
           
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FlatIntelliJLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane bg;
    private uitravel.Components.MyButton btnSearch;
    private uitravel.User.MainUI.ChatBox chatBox;
    private uitravel.User.MainUI.NoLoggedHeader header1;
    private uitravel.User.MainUI.LoggedHeader header2;
    private uitravel.Components.ImagePanel imagePanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane main;
    private uitravel.Components.RoundedPanel pnlHotel;
    private uitravel.Components.MyTextField txtDate;
    private javax.swing.JComboBox<String> txtSearch;
    // End of variables declaration//GEN-END:variables
    private DateChooser selectDate;
   // private javax.swing.JLayeredPane bg;

    private void init()  {

        GlassPanePopup.install(this);

        //bg.setPreferredSize(new java.awt.Dimension(1400, 10000));

        layout = new MigLayout("wrap, fill, insets 0","[]", "12[]12[]12");
        //bg.setLayout(layout);
       if(!isLogged){
            header1.setVisible(true);
            header2.setVisible(false);

            header1.addEvent((ActionEvent e)->{
                LoginMain lm = new LoginMain();
                lm.setLogin(header1.isLogin);
                lm.setVisible(true);
                dispose();
            });
            header1.addAminUIEvent((ActionEvent e)->{
                AdminWelcome am = new AdminWelcome();
                am.setVisible(true);
                dispose();
            });
            header1.addChatEvent((ActionEvent e)->{
                chatBox.setVisible(true);

             /*
                  GlassPanePopup.showPopup(new ChatBox(),new DefaultOption(){
                   @Override
                   public float opacity(){
                       return 0;
                   }
                   
                   public LayoutCallback getLayoutCallBack(Component parent){
                       return new DefaultLayoutCallBack(parent){
                           @Override
                           public void correctBounds(ComponentWrapper cw){
                               if(parent.isVisible()){
                                   Point p = parent.getLocationOnScreen();
                                   cw.setBounds(-1,-80,cw.getWidth(),cw.getHeight());
                               }
                               else{
                                   super.correctBounds(cw);
                               }
                           }
                       };
                   }
               });

                */
            });
       }
       else{
            header2.setVisible(true);
            header1.setVisible(false);

            header2.addAminUIEvent((ActionEvent e)->{
                AdminWelcome am = new AdminWelcome();
                am.setVisible(true);
                dispose();
            });
            header2.addEvent(new MouseAdapter(){
                @Override
                    public void mousePressed(MouseEvent e) {
                    GlassPanePopup.showPopup(new Loading());
                SwingWorker<Void, Void> worker = new SwingWorker<>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                            UserInfo ui = new UserInfo();
                            try {
                                ui.setUID(uid);
                            } catch (IOException ex) {
                                Logger.getLogger(UserMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            // Hiển thị kết quả sau khi tác vụ hoàn thành
                            SwingUtilities.invokeLater(() -> {
                                ui.setVisible(true);
                            });
                            return null;
                    }
                    @Override
                    protected void done() {
                        // Ẩn màn hình loading sau khi tác vụ hoàn thành
                        GlassPanePopup.closePopupAll();
                        dispose();

                    }
                };
                 worker.execute();                    
                    }
            });
            
            header2.addChatEvent((ActionEvent e)->{
               chatBox.setVisible(true);
            });
            loadDataFromFireStore(uid);
       }
       
       



        //btnSearch.setBackground(new Color(255,128,0));
     
        selectDate = new DateChooser();
        selectDate.setTextField(txtDate);
        selectDate.setBetweenCharacter(" đến ");
        selectDate.setDateSelectionMode(DateChooser.DateSelectionMode.BETWEEN_DATE_SELECTED);
       
      
        
        loadHotelData();

        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        model.addElement("Chọn nơi bạn muốn đến");
        
        for (Map.Entry<String, String> entry : placeData.entrySet()) {
             model.addElement(entry.getKey());
           
        }
        txtSearch.setModel(model);
        txtSearch.setSelectedIndex(0);
        
        main.setViewportView(bg);
        addChatBox();
        
        
  
    }
    private void addChatBox(){
        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);

        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(1013, Short.MAX_VALUE)
                .addComponent(chatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 1412, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(364, Short.MAX_VALUE)
                .addComponent(chatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE))
        );
        chatBox.setVisible(false);

    }
    
    private Map<String, String> getTourData(){
        Map<String, String>  placeData = new HashMap<>();
        try {
            CollectionReference userCollection = firestore.collection("Place");
            ApiFuture<QuerySnapshot> querySnapshot = userCollection.get();
            // Process the documents
            List<QueryDocumentSnapshot> documents = querySnapshot.get().getDocuments();
            for (DocumentSnapshot document : documents) {
                String documentId = document.getId();
                String background = document.getString("Background");
                placeData.put(documentId, background);
                System.out.println(background);
            }
        } catch (ExecutionException | InterruptedException e) {
        }
        return placeData;
    }

    private void loadHotelData(){
        pnlHotel.removeAll();
        pnlHotel.setLayout(new MigLayout("wrap,fill, insets 0","push[]20[]20[]push","30[]20[]push"));
        placeData = getTourData();
        allHotels = new ArrayList<>();
        for (Map.Entry<String, String> entry : placeData.entrySet()) {
            Place t = new Place();
            t.setPreferredSize(new Dimension(350,200));
            t.setBackGroundIMG(getImgFromBytes(entry.getValue()));
            t.setTxtPlace(entry.getKey());
            t.setID(entry.getKey());
            t.getPlaceTour(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                System.out.println("Mouse pressed on: " + t.getTxtPlace());
                GlassPanePopup.showPopup(new Loading());
                SwingWorker<Void, Void> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() throws Exception {
                    // Thực hiện tác vụ nặng ở đây
                    UserSearch userSearch = new UserSearch();

                    userSearch.setIsLogged(isLogged);
                    if(isLogged){
                        userSearch.setUID(uid);
                    }
                    userSearch.setSearchData(entry.getKey());
                    userSearch.setAllPlaces(placeData);

                    // Hiển thị kết quả sau khi tác vụ hoàn thành
                    SwingUtilities.invokeLater(() -> {
                        userSearch.setVisible(true);
                    });

                    return null;
                }

                @Override
                protected void done() {
                    // Ẩn màn hình loading sau khi tác vụ hoàn thành
                    GlassPanePopup.closePopupAll();
                    dispose();

            }
        };
        worker.execute();
            }
        });
            pnlHotel.add(t);
            allHotels.add(t);
        }
    }
    private ImageIcon getImgFromBytes(String imageDataString){
        try{  
            byte[] imageData = Base64.getDecoder().decode(imageDataString);
        

            ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
            BufferedImage bufferedImage;
        
            bufferedImage = ImageIO.read(bais);
            return new ImageIcon(bufferedImage);

        }
         catch (IOException ex) {
            Logger.getLogger(UserMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    };
   
}
